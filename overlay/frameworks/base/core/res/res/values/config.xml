<?xml version="1.0" encoding="utf-8"?>
<!--
/*
** Copyright 2015, The CyanogenMod Project
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
*/
-->

<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">

    <!-- Flag indicating whether the we should enable the automatic brightness in Settings.
         Software implementation will be used if config_hardware_auto_brightness_available is not set -->
    <bool name="config_automatic_brightness_available">true</bool>

    <!-- Default screen brightness setting.
         Must be in the range specified by minimum and maximum. -->
    <integer name="config_screenBrightnessSettingDefault">64</integer>

    <!-- Array of light sensor LUX values to define our levels for auto backlight brightness support.
         The N entries of this array define N  1 zones as follows:

         Zone 0:        0 <= LUX < array[0]
         Zone 1:        array[0] <= LUX < array[1]
         ...
         Zone N:        array[N - 1] <= LUX < array[N]
         Zone N + 1     array[N] <= LUX < infinity

         Must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLevels">
        <item>1</item>
        <item>6</item>
        <item>12</item>
        <item>25</item>
        <item>50</item>
        <item>80</item>
        <item>120</item>
        <item>175</item>
        <item>250</item>
        <item>350</item>
        <item>500</item>
        <item>750</item>
        <item>1000</item>
        <item>1400</item>
        <item>2000</item>
        <item>3500</item>
        <item>6000</item>
        <item>10000</item>
        <item>15000</item>
        <item>20000</item>
        <item>30000</item>
        <item>65535</item>
    </integer-array>

    <!-- Array of output values for LCD backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         This must be overridden in platform specific overlays -->
    
    <integer-array name="config_autoBrightnessLcdBacklightValues">
        <item>7</item>
        <item>10</item>
	<item>13</item>
        <item>16</item>
        <item>22</item>
	<item>28</item>
        <item>34</item>
        <item>43</item>
        <item>52</item>
        <item>61</item>
        <item>72</item>
        <item>83</item>
        <item>94</item>
        <item>105</item>
        <item>117</item>
        <item>129</item>
        <item>141</item>
        <item>153</item>
        <item>166</item>
        <item>179</item>
        <item>192</item>
        <item>205</item>
        <item>218</item>
    </integer-array>

    <!-- Boolean indicating whether the wifi chipset has dual frequency band support -->
    <bool translatable="false" name="config_wifi_dual_band_support">true</bool>

    <!-- Boolean indicating whether or not to revert to default country code when cellular
         radio is unable to find any MCC information to infer wifi country code from -->
    <bool translatable="false" name="config_wifi_revert_country_code_on_cellular_loss">true</bool>

    <!-- Vibrator pattern for feedback about a long screen/key press -->
    <integer-array name="config_longPressVibePattern">
        <item>0</item>
        <item>13</item>
    </integer-array>

    <!-- Vibrator pattern for feedback about touching a virtual key -->
    <integer-array name="config_virtualKeyVibePattern">
        <item>0</item>
        <item>24</item>
    </integer-array>

    <!-- Vibrator pattern for a very short but reliable vibration for soft keyboard tap -->
    <integer-array name="config_keyboardTapVibePattern">
        <item>0</item>
        <item>8</item>
    </integer-array>

    <!-- Vibrator pattern for feedback about hitting a scroll barrier -->
    <integer-array name="config_scrollBarrierVibePattern">
        <item>0</item>
        <item>15</item>
        <item>30</item>
        <item>15</item>
    </integer-array>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
         USB interfaces.  If the device doesn't want to support tething over USB this should
         be empty.  An example would be "usb.*" -->
    <string-array translatable="false" name="config_tether_usb_regexs">
        <item>"rndis\\d"</item>
    </string-array>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
         Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
         should be empty.  An example would be "softap.*" -->
    <string-array translatable="false" name="config_tether_wifi_regexs">
        <item>"wlan0"</item>
        <item>"wigig0"</item>
        <item>"softap0"</item>
    </string-array>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
         bluetooth interfaces.  If the device doesn't want to support tethering over bluetooth this
         should be empty. -->
    <string-array translatable="false" name="config_tether_bluetooth_regexs">
         <item>"bnep\\d"</item>
         <item>"bt-pan"</item>
    </string-array>

    <!-- Array of allowable ConnectivityManager network types for tethering -->
    <!-- Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
         [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH -->
    <integer-array translatable="false" name="config_tether_upstream_types">
        <item>0</item>
        <item>1</item>
        <item>5</item>
        <item>7</item>
    </integer-array>

    <!-- Configure mobile tcp buffer sizes in the form:
         rat-name:rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max
         If no value is found for the rat-name in use, the system default will be applied.
    -->
    <string-array name="config_mobile_tcp_buffers">
        <item>lte:524288,1048576,8388608,262144,524288,4194304</item>
        <item>lte_ca:524288,1048576,8388608,262144,524288,4194304</item>
        <item>umts:131072,262144,1452032,4096,16384,399360</item>
        <item>hspa:131072,262144,1452032,4096,16384,399360</item>
        <item>hsupa:131072,262144,1452032,4096,16384,399360</item>
        <item>hsdpa:131072,262144,1452032,4096,16384,399360</item>
        <item>hspap:131072,262144,1452032,4096,16384,399360</item>
        <item>edge:16384,32768,131072,4096,16384,65536</item>
        <item>gprs:4096,8192,24576,4096,8192,24576</item>
        <item>evdo:131072,262144,1048576,4096,16384,524288</item>
        <item>ehrpd:4094,87380,1048576,4096,16384,262144</item>
    </string-array>

    <!-- Configure ethernet tcp buffersizes in the form:
         rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max -->
    <string name="config_wifi_tcp_buffers">131072,262144,3145728,4096,221184,3145728</string>

    <!-- Boolean indicating whether the wifi chipset has background scan support -->
    <bool name="config_wifi_background_scan_support">true</bool>

    <!-- Operating volatage for bluetooth controller. 0 by default-->
    <integer name="config_bluetooth_operating_voltage_mv">3300</integer>

    <!-- Boolean indicating if restoring network selection should be skipped -->
    <!-- The restoring is handled by modem if it is true-->
    <bool name="skip_restoring_network_selection">true</bool>

    <!-- Is the device capable of hot swapping an UICC Card -->
    <bool name="config_hotswapCapable">true</bool>

    <!-- If this is true, the screen will come on when you unplug usb/power/whatever. -->
    <bool name="config_unplugTurnsOnScreen">true</bool>

    <!-- Indicate whether closing the lid causes the device to go to sleep and opening
         it causes the device to wake up.
         The default is false. -->
    <bool name="config_lidControlsSleep">false</bool>

    <!-- When true use the linux /dev/input/event subsystem to detect the switch changes
        on the headphone/microphone jack. When false use the older uevent framework. -->
    <bool name="config_useDevInputEventForAudioJack">false</bool>

    <!-- Enable overlay for all location components. -->
    <bool name="config_enableNetworkLocationOverlay" translatable="false">true</bool>
    <string name="config_networkLocationProviderPackageName" translatable="false">com.qualcomm.location</string>
    <bool name="config_enableFusedLocationOverlay" translatable="false">true</bool>
    <string name="config_fusedLocationProviderPackageName" translatable="false">com.qualcomm.location</string>

    <!-- Maximum number of supported users -->
    <integer name="config_multiuserMaximumUsers">4</integer>

    <!-- Whether Multiuser UI should be shown -->
    <bool name="config_enableMultiUserUI">true</bool>

    <!-- Indicate whether the SD card is accessible without removing the battery. -->
    <bool name="config_batterySdCardAccessibility">false</bool>

    <!-- Whether a software navigation bar should be shown. NOTE: in the future this may be
         autodetected from the Configuration. -->
    <bool name="config_showNavigationBar">false</bool>

    <!-- Screen brightness used to dim the screen while dozing in a very low power state.
          May be less than the minimum allowed brightness setting
          that can be set by the user. -->
    <integer name="config_screenBrightnessDoze">17</integer>
    
    <!-- Minimum screen brightness setting allowed by the power manager.
         The user is forbidden from setting the brightness below this level. -->
    <integer name="config_screenBrightnessSettingMinimum">1</integer>

    <!-- ComponentName of a dream to show whenever the system would otherwise have
         gone to sleep.  When the PowerManager is asked to go to sleep, it will instead
         try to start this dream if possible.  The dream should typically call startDozing()
         to put the display into a low power state and allow the application processor
         to be suspended.  When the dream ends, the system will go to sleep as usual.
         Specify the component name or an empty string if none.
         Note that doze dreams are not subject to the same start conditions as ordinary dreams.
         Doze dreams will run whenever the power manager is in a dozing state. -->
    <string name="config_dozeComponent">com.android.systemui/com.android.systemui.doze.DozeService</string>

    <!-- If true, the doze component is not started until after the screen has been
          turned off and the screen off animation has been performed. -->
    <bool name="config_dozeAfterScreenOff">true</bool>

    <!-- Power Management: Specifies whether to decouple the interactive state of the
         device from the display on/off state.
         When false, setInteractive(..., true) will be called before the display is turned on
         and setInteractive(..., false) will be called after the display is turned off.
         This mode provides best compatibility for devices that expect the interactive
         state to be tied to the display state.
         When true, setInteractive(...) will be called independently of whether the display
         is being turned on or off.  This mode enables the power manager to reduce
         clocks and disable the touch controller while the display is on.
         This resource should be set to "true" when a doze component has been specified
         to maximize power savings but not all devices support it.
         Refer to power.h for details.
    -->
    <bool name="config_powerDecoupleInteractiveModeFromDisplay">true</bool>

    <!-- The RadioAccessFamilies supported by the device.
         Empty is viewed as "all".  Only used on devices which
         don't support RIL_REQUEST_GET_RADIO_CAPABILITY
         format is UMTS|LTE|... -->
    <string translatable="false" name="config_radio_access_family">GSM | WCDMA | LTE | CDMA | EVDO</string>

    <!-- Flag specifying whether VoLTE is available on device -->
    <bool name="config_device_volte_available">true</bool>
	<!-- Flag specifying whether VT should be available for carrier: independent of
         carrier provisioning. If false: hard disabled. If true: then depends on carrier
         provisioning, availability etc -->
    <bool name="config_carrier_vt_available">true</bool>
    
    <!-- Flag specifying whether VoLTE should be available for carrier: independent of
         carrier provisioning. If false: hard disabled. If true: then depends on carrier
         provisioning, availability etc -->
    <bool name="config_carrier_volte_available">true</bool>

    <!-- enabling WifiDisplay(Miracast Source)-->
    <bool name="config_enableWifiDisplay">true</bool>

    <!-- Flag specifying whether WFC over IMS is available on device -->
    <bool name="config_device_wfc_ims_available">true</bool>

    <!-- Flag specifying whether WFC over IMS should be available for carrier: independent of
         carrier provisioning. If false: hard disabled. If true: then depends on carrier
         provisioning, availability etc -->
    <bool name="config_carrier_wfc_ims_available">true</bool>

    <!-- Flag specifying whether VT is available on device -->
    <bool name="config_device_vt_available">true</bool>

    <!-- ImsService package name to bind to by default, if config_dynamic_bind_ims is true -->
    <string name="config_ims_package">org.codeaurora.ims</string>

    <!-- Flag specifying whether or not IMS will use the ImsResolver dynamically -->
    <bool name="config_dynamic_bind_ims">true</bool>

    <!-- Boolean indicating if current platform supports BLE peripheral mode -->
    <bool name="config_bluetooth_le_peripheral_mode_supported">true</bool>

    <!-- Whether device supports double tap to wake -->
    <bool name="config_supportDoubleTapWake">false</bool>

   <!-- Boolean indicating whether the HWC setColorTransform function can be performed efficiently
   in hardware. -->
   <bool name="config_setColorTransformAccelerated">true</bool>

   <!-- Default files to pin via Pinner Service -->
   <string-array translatable="false" name="config_defaultPinnerServiceFiles">
       <item>"/system/framework/arm64/boot-framework.oat"</item>
       <item>"/system/framework/boot-framework.vdex"</item>
       <item>"/system/framework/oat/arm64/services.odex"</item>
       <item>"/system/framework/oat/arm64/services.vdex"</item>
       <item>"/system/framework/arm64/boot.oat"</item>
       <item>"/system/framework/boot.vdex"</item>
       <item>"/system/framework/arm64/boot-core-libart.oat"</item>
       <item>"/system/framework/boot-core-libart.vdex"</item>
   </string-array>
   
   <!-- Whether device has turbo power charging support -->
   <bool name="config_hasTurboPowerCharger">true</bool>

   <!-- Should the pinner service pin the Camera application? -->
   <bool name="config_pinnerCameraApp">true</bool>
     <!-- The list of vendor package signatures that should also be considered
         platform signatures, specifically for use on devices with a vendor partition. -->
    <string-array name="config_vendorPlatformSignatures" translatable="false">
        <item>308203c5308202ada003020102020213ae300d06092a864886f70d01010505003076310b30090603550406130255533111300f06035504081308496c6c696e6f6973311530130603550407130c4c69626572747976696c6c653111300f060355040a13084d6f746f726f6c61310c300a060355040b13034d4d49311c301a06035504031313436f6d6d6f6e204d6f746f424c555220322d31301e170d3131303331353232343430355a170d3336303331353232343430355a3078310b30090603550406130255533111300f06035504081308496c6c696e6f6973311530130603550407130c4c69626572747976696c6c653111300f060355040a13084d6f746f726f6c61310c300a060355040b13034d4d49311e301c06035504031315436f6d6d6f6e204d6f746f424c555220322d312d3130820122300d06092a864886f70d01010105000382010f003082010a0282010100bdbc690d0a26c6c953c5900b1ebb303ee791edbad39950f1b185cfc75f9cc6268a4cb7aadf4eb87d3ba7bf982e0ede6a9e3a41b07d84a626b4bd6e37a9feb4a96add829913e7b5e7a9575616f91f22c6dcec9e0293183d419d50f62756b22cd6d8284f8be17fa1c422eac27738c3a9c937d0313e3417ab6f4bb2cdc13f2f77b160b0ff87357b8983d8ea729a7135d88020c6fbca873f78f567a4092cdf28999d459cb8943d7b1e6e35cde5b035fdb63944b78d026fd291476fc385df694e42b1db443dd1ffb427f37d26dcd8cf1d8380fe6a094c1b45c924f1addd2e90d67a32bb8de5b146f47c7bfeae5286c810fa51762b073b58dabf6494a47032595f60410203010001a35b3059301f0603551d23041830168014b3c62fe567c28d4489abc7abbdce60030ca6b62c301106096086480186f8420101040403020410300e0603551d0f0101ff0404030205e030130603551d25040c300a06082b06010505070303300d06092a864886f70d010105050003820101001384fcff397bbc871c55033830f4ca3de5c7d47116c79eb6c0ae152faec03a284c44bc39e3d3756467da60fa89cdd6546e4fd4b182faba3e833093ad8d6b975b5d72836e784f3e3a0ac34d7e83efbfa6c9601e54200415f5ccfcb2555430249ce5794e493f7a4c534b984ac3810ba09bcc9c5e7d985ff1b0902676ce1546301e91089614167b6b562c8585fea36ef6af6c350d77bad00a234755364eeb0be232d2561fb3e6535991c54a1f46f528a82139b7c62dddc53478d59aa593e79fb0f4610320072378f6101aced914e5da439e223900c46ef19d00763c4c315402ea82b14119a276fe40684bfad8c6bd16611c0b972daa5d18f2dfdd1f9bb1ca7aedfd</item>
    </string-array>

</resources>
